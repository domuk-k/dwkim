---
import { getEntry, render } from 'astro:content'

const developerEntry = await getEntry('about', 'developer')!
const runnerEntry = await getEntry('about', 'runner')!
const contributorEntry = await getEntry('about', 'contributor')!
const coachEntry = await getEntry('about', 'coach')!

const [DeveloperContent, RunnerContent, ContributorContent, CoachContent] = await Promise.all([
  render(developerEntry),
  render(runnerEntry),
  render(contributorEntry),
  render(coachEntry)
]).then((n) => n.map((n) => n.Content))
---

<div class="about-tabs">
  <nav class="tab-nav">
    <button class="tab-btn active" data-tab="developer">개발자</button>
    <button class="tab-btn" data-tab="runner">러너</button>
    <button class="tab-btn" data-tab="contributor">기여자</button>
    <button class="tab-btn" data-tab="coach">코치</button>
  </nav>

  <div class="tab-content">
    <div class="tab-panel active" id="developer">
      <div class="prose content-from-md">
        <DeveloperContent />
      </div>
    </div>

    <div class="tab-panel" id="runner">
      <div class="prose content-from-md">
        <RunnerContent />
      </div>
    </div>

    <div class="tab-panel" id="contributor">
      <div class="prose content-from-md">
        <ContributorContent />
      </div>
    </div>

    <div class="tab-panel" id="coach">
      <div class="prose content-from-md">
        <CoachContent />
      </div>
    </div>
  </div>
</div>

<style>
  .about-tabs {
    margin-bottom: 1.25rem;
  }

  .tab-nav {
    display: flex;
    gap: 0.25rem;
    margin-bottom: 1.5rem;
    border-bottom: 1px solid var(--border);
    padding-bottom: 0.5rem;
  }

  .tab-btn {
    background: none;
    border: none;
    padding: 0.5rem 1rem;
    font-size: var(--font-size-m);
    font-family: var(--font-sans);
    color: var(--text-secondary);
    cursor: pointer;
    border-radius: 0.25rem;
    transition: all 0.15s ease;
    font-weight: var(--font-weight-regular);
  }

  .tab-btn:hover {
    color: var(--text-primary);
    background-color: var(--selection);
  }

  .tab-btn.active {
    color: var(--text-primary);
    background-color: var(--code-bg);
    font-weight: var(--font-weight-bold);
  }

  .tab-panel {
    display: none;
    animation: fadeIn 0.2s ease;
  }

  .tab-panel.active {
    display: block;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(0.5rem);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .tab-panel .prose {
    max-width: none;
    color: var(--text-primary);
  }

  .tab-panel .prose p {
    margin-bottom: 1rem;
    line-height: 1.6;
    font-size: var(--font-size-m);
  }

  .tab-panel .prose ul {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .tab-panel .prose li {
    margin-bottom: 0.5rem;
    font-size: var(--font-size-m);
  }

  .tab-panel .prose a {
    color: var(--text-primary);
    text-decoration: underline;
    text-decoration-color: var(--text-tertiary);
    text-underline-offset: 0.2em;
  }

  .tab-panel .prose a:hover {
    text-decoration-color: var(--text-secondary);
  }

  .tab-panel .prose h3 {
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-size: var(--font-size-l);
    font-weight: var(--font-weight-bold);
    color: var(--text-primary);
  }

  /* Content from markdown specific styles */
  .content-from-md h2 {
    display: none; /* Hide section headers as they're handled by tabs */
  }

  .content-from-md > *:first-child {
    margin-top: 0;
  }
</style>

<script is:inline>
  function initTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn')
    const tabPanels = document.querySelectorAll('.tab-panel')

    if (!tabButtons.length || !tabPanels.length) return

    // Remove existing event listeners to prevent duplicates
    tabButtons.forEach((button) => {
      const newButton = button.cloneNode(true)
      button.parentNode.replaceChild(newButton, button)
    })

    // Re-query elements after cloning
    const newTabButtons = document.querySelectorAll('.tab-btn')

    newTabButtons.forEach((button) => {
      button.addEventListener('click', (e) => {
        e.preventDefault()
        const targetTab = button.getAttribute('data-tab')

        // Remove active class from all buttons and panels
        newTabButtons.forEach((btn) => btn.classList.remove('active'))
        tabPanels.forEach((panel) => panel.classList.remove('active'))

        // Add active class to clicked button and corresponding panel
        button.classList.add('active')
        const targetPanel = document.getElementById(targetTab)
        if (targetPanel) {
          targetPanel.classList.add('active')
        }
      })
    })
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTabs)
  } else {
    initTabs()
  }

  // Re-initialize on page navigation (for View Transitions)
  document.addEventListener('astro:page-load', initTabs)

  // Fallback for non-Astro navigation
  window.addEventListener('popstate', initTabs)
</script>
